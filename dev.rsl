#!/usr/bin/env rad
---
Facilitates development & ops for flexid.
---
args:
    build b bool          # Enable to build.
    test t bool           # Enable to test.
    version v string = "" # Set to release a new version.
    amend a bool          # Enable to amend the previous commit.
    push p bool           # Enable to push.

    version enum ["patch", "minor", "major"]

resolve_version = fn():
    _, tags = $!`git tag`
    tags = split(tags[:-1], "\n")
    tags = [replace(t, "v", "") for t in tags]
    tags = [split(t, "\.") for t in tags]
    major = sort([parse_int(t[0]) for t in tags])[-1]
    minor = sort([parse_int(t[1]) for t in tags if parse_int(t[0]) == major])[-1]
    patch = sort([parse_int(t[2]) for t in tags if parse_int(t[0]) == major and parse_int(t[1]) == minor])[-1]
    if version == "patch":
        version = "v{major}.{minor}.{patch + 1}"
    else if version == "minor":
        version = "v{major}.{minor + 1}.0"
    else if version == "major":
        version = "v{major + 1}.0.0"
    return version

if version or build:
    $!`go build`
    $!r`find . -name '*.go' -exec gofmt -w {} +`
    $!`goimports -w .`

if version or test:
    $!`go test`

if version:
    clean_before = unsafe $`git status --porcelain | grep -q .`

    $!`git diff HEAD --compact-summary`
    if not clean_before:
        print(red("Dirty git repo! Commit and try again."))
        exit(1)
    
    version = resolve_version()
    print("Bumping to version:", green(version))

    if amend:
        confirm $!`git commit --amend --no-edit`
    else:
        confirm $!`git commit -m "Bump version to {version}"`

    confirm $!`git tag -a "{version}" -m "Bump version to {version}"`

if version or push:
    _, branch  = $!`echo -n $(git branch --show-current)`
    confirm $!`git push origin {branch} --tags`

print(green("âœ… Done!"))

// todo rad
// - RAD-271 allow return not as last stmt
// - custom func definitions at bottom of file
